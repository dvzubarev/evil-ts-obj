Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace next statement t1

=-=
def main():
    |v=3
    return call(v=v,
                cv = 13)
=-=
def main():
    v=3
    |v=3
=-=-=


Name: Replace next statement t2

=-=
def main():
    |v=[1,
       2]
    return call(v=v,
                cv = 13)
=-=
def main():
    v=[1,
       2]
    |v=[1,
       2]
=-=-=

Name: Replace next statement t3

=-=
def main():
    |v=[1,
       2]

call(v=v,
     cv = 13)
=-=
def main():
    v=[1,
       2]

|v=[1,
   2]
=-=-=

Name: Replace next statement t4

=-=
def main():
    |v=[1,
       2]

def func():
    for v in c:
        call(v=v,
             cv = 13)
=-=
def main():
    v=[1,
       2]

def func():
    for v in c:
        |v=[1,
           2]
=-=-=

Name: Replace next statement t5

=-=
def main():
    |v=3
=-=
def main():
    |v=3
=-=-=

Name: Replace next statement t6

=-=
if |(a == 3 or (b and 3 < t)):
=-=
if (|(a == 3 or (b and 3 < t)) or (b and 3 < t)):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-beginning-of-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace parent statement t1

=-=
if (|a == 3 or (b and 3 < t)):
=-=
if |a == 3:
=-=-=

Name: Replace parent statement t2

=-=
if (a == 3 or (b and |3 < t)):
=-=
if (a == 3 or |3 < t):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-param-upper))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-param-outer)))

Name: Replace upper t1

=-=
def temp(var, |s='1,'):
    pass
def main(t):
=-=
def temp(var, s='1,'):
    pass
def main(|var, s='1,'):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (evil-ts-obj-edit-cancel)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace cancel test t1

=-=
def main():
    |v=3
    v *= 8
    return call(v=v,
                cv = 13)
=-=
def main():
    v=3
    v *= 8
    v *= 8
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-inner)))

Name: Raise statement test t1

=-=
    for i in range(3, 10):
        |a = 3
=-=
    |a = 3
=-=-=

Name: Raise statement test t2

=-=
if (val := |d.get('k')) is not None:
    pass
=-=
if (|d.get('k')) is not None:
    pass
=-=-=

Name: Raise statement test t3

=-=
if (|d.get('k')) is not None:
    pass
=-=
if |d.get('k'):
    pass
=-=-=

Name: Raise statement test t4

=-=
if |d.get('k'):
    pass
=-=
|d.get('k')
=-=-=

Name: Raise statement test t5

=-=
if |call() and True:
    pass
=-=
|call() and True
=-=-=

Name: Raise statement test t6

=-=
if c|all() and True:
    pass
=-=
if |call():
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-outer)))

Name: Raise statement test t1

=-=
if b and |b >3:
    pass
=-=
if |and b >3:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-lower)))

Name: Raise statement lower t1

=-=
def main():
    for stream_key, records in resp:
        test = resp
        |batch = Batch()
        client = bytes(stream_key[8:])

    return 2 * a
=-=
def main():
    |batch = Batch()
    client = bytes(stream_key[8:])

    return 2 * a
=-=-=

Name: Raise statement lower t2

=-=
def |main():
    for stream_key, records in resp:
        test = resp
        batch = Batch()
        client = bytes(stream_key[8:])

    return 2 * a
=-=
|test = resp
batch = Batch()
client = bytes(stream_key[8:])
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-param-inner)))

Name: Raise param inner t1

=-=
var = call(arg1,
           |kw1=[],
           kw2='a, b')
=-=
var = call(|kw1=[])
=-=-=

Name: Raise param inner t2

=-=
var = call(|arg1,
           kw1=[],
           kw2='a, b')
=-=
var = call(|arg1)
=-=-=

Name: Raise param inner t3

=-=
return func(k, func(n1, n|2), *args, **kwargs)
=-=
return func(k, func(|n2), *args, **kwargs)
=-=-=

Name: Raise param inner t4

=-=
return func(k, func(|n2), *args, **kwargs)
=-=
return func(k, |n2, *args, **kwargs)
=-=-=

Name: Raise param inner t5

=-=
return func(k, |n2, *args, **kwargs)
=-=
return func(|n2)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-lower))
    (apply #'evil-shift-right (evil-ts-obj-last-range)))

Name: Last range with raise t1

=-=
def main():
    for t in range(3):
        t = 3
        break
    else:
        |t =1
        bb = 3
    return 2 * a
=-=
def main():
    for t in range(3):
        t = 3
        break
        t =1
        bb = 3
    return 2 * a
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-raise)
    (apply #'evil-ts-obj-raise (evil-ts-obj-param-lower)))

Name: Raise param lower t1

=-=
def main(par1, |par2,
         par3, par4):
    pass
=-=
def main(|par2,
         par3, par4):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-raise)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-upper)))

Name: Raise statement upper t1

=-=
if a is not None and| a > 0 and a < 8:
    pass
=-=
if |a is not None and a > 0:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-next-largest-thing)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer)))

Name: Swap outer params t1

=-=
def main(p|ar1, par2, par3):
    pass
=-=
def main(par2, |par1, par3):
    pass
=-=-=

Name: Swap outer params t2

=-=
def main(p|1, t=call(nest1,
                    nest2,
                    nest3), k=par3):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p1, k=par3):
    pass
=-=-=

Name: Swap outer params t3

=-=
def main(par1, |t=call(nest1,
                      nest2,
                      nest3), k="par3", p=p):
    pass
=-=
def main(par1, k="par3", |t=call(nest1,
                                nest2,
                                nest3), p=p):
    pass
=-=-=

Name: Swap outer params t4

=-=
def main(|p=call2(n,
                 m), t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p=call2(n,
                                m), par1,):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-previous-largest-thing)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer)))

Name: Swap outer params t5

=-=
def main(p=call2(n,
                 m), |t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(|t=call(nest1,
                nest2,
                nest3), p=call2(n,
                                m), par1,):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-next-thing)
    (should-error (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))))

Name: Swap intersected params t1

Swap of intersected ranges are not allowed

=-=
def main(par1, p|ar2, par3):
    pass
=-=
def main(par1, par2, |par3):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-up 1))


Name: Swap drag up t1

=-=
def main(p=call2(n,
                 m), |t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(|t=call(nest1,
                nest2,
                nest3), p=call2(n,
                                m), par1,):
    pass
=-=-=

Name: Swap drag up t2

=-=
if i is not None and i > 0 and |i < 8:
   pass
=-=
if i is not None and |i < 8 and i > 0:
   pass
=-=-=

Name: Swap drag up t3

=-=
if i is not None and |i < 8 and i > 0:
   pass
=-=
if |i < 8 and i is not None and i > 0:
   pass
=-=-=

Name: Swap drag up t3

=-=
i=3
if |i < 8 and i is not None and i > 0:
   pass
=-=
i=3
if |i < 8 and i is not None and i > 0:
   pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-down 1))


Name: Swap drag down t1

=-=
def main(|p=call2(n,
                 m), t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p=call2(n,
                                m), par1,):
    pass
=-=-=

Name: Swap drag down t2

=-=
if i is not None and |i > 0 and #comm
   i < 8:
   pass
=-=
if i is not None and i < 8 and #comm
   |i > 0:
   pass
=-=-=

Name: Swap drag down t3

=-=
if i is not None and i < 8 and |i > 0:
   pass
=-=
if i is not None and i < 8 and |i > 0:
   pass
=-=-=

Name: Swap drag down t4

=-=
def m():
    i = 0
    |if i is not None and i < 8 and |i > 0:
        pass
    #comm
    i *= 3
=-=
def m():
    i = 0
    i *= 3
    #comm
    |if i is not None and i < 8 and |i > 0:
        pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-down 2))


Name: Swap drag down with count arg t1

=-=
def main(|p=call2(n,
                 m), par2, par3,):
    pass
=-=
def main(par3, par2, |p=call2(n,
                             m),):
    pass
=-=-=

Name: Swap drag down with count arg t2

=-=
def main(par1, |par2, par3,):
    pass
=-=
def main(par1, |par2, par3,):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-up 3))


Name: Swap drag up with count arg t1

=-=
def main(par1, par2, par3, |p=call2(n,
                                   m)):
    pass
=-=
def main(|p=call2(n,
                 m), par2, par3, par1):
    pass
=-=-=
