Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace next statement t1

=-=
def main():
    |v=3
    return call(v=v,
                cv = 13)
=-=
def main():
    v=3
    |v=3
=-=-=


Name: Replace next statement t2

=-=
def main():
    |v=[1,
       2]
    return call(v=v,
                cv = 13)
=-=
def main():
    v=[1,
       2]
    |v=[1,
       2]
=-=-=

Name: Replace next statement t3

=-=
def main():
    |v=[1,
       2]

call(v=v,
     cv = 13)
=-=
def main():
    v=[1,
       2]

|v=[1,
   2]
=-=-=

Name: Replace next statement t4

=-=
def main():
    |v=[1,
       2]

def func():
    for v in c:
        call(v=v,
             cv = 13)
=-=
def main():
    v=[1,
       2]

def func():
    for v in c:
        |v=[1,
           2]
=-=-=

Name: Replace next statement t5

=-=
def main():
    |v=3
=-=
def main():
    |v=3
=-=-=

Name: Replace next statement t6

=-=
if |(a == 3 or (b and 3 < t)):
=-=
if (|(a == 3 or (b and 3 < t)) or (b and 3 < t)):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-beginning-of-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace parent statement t1

=-=
if (|a == 3 or (b and 3 < t)):
=-=
if |a == 3:
=-=-=

Name: Replace parent statement t2

=-=
if (a == 3 or (b and |3 < t)):
=-=
if (a == 3 or |3 < t):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-param-upper))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-param-outer)))

Name: Replace upper t1

=-=
def temp(var, |s='1,'):
    pass
def main(t):
=-=
def temp(var, s='1,'):
    pass
def main(|var, s='1,'):
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (evil-ts-obj-edit-cancel)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner))
    (evil-ts-obj-same-next-thing)
    (apply #'evil-ts-obj-replace (evil-ts-obj-statement-inner)))

Name: Replace cancel test t1

=-=
def main():
    |v=3
    v *= 8
    return call(v=v,
                cv = 13)
=-=
def main():
    v=3
    v *= 8
    v *= 8
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-inner)))

Name: Raise statement inner test t1

=-=
    for i in range(3, 10):
        |a = 3
=-=
    |a = 3
=-=-=

Name: Raise statement test t2

=-=
if (val := |d.get('k')) is not None:
    pass
=-=
if (|d.get('k')) is not None:
    pass
=-=-=

Name: Raise statement test t3

=-=
if (|d.get('k')) is not None:
    pass
=-=
if |d.get('k'):
    pass
=-=-=

Name: Raise statement test t4

=-=
if |d.get('k'):
    pass
=-=
|d.get('k')
=-=-=

Name: Raise statement test t5

=-=
if| call() and True:
    pass
=-=
|call() and True
=-=-=

Name: Raise statement test t6

=-=
if |call() and True:
    pass
=-=
if |call():
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-outer)))

Name: Raise statement outer test t1

=-=
if b and |b >3:
    pass
=-=
if |and b >3:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-lower)))

Name: Raise statement lower t1

=-=
def main():
    for stream_key, records in resp:
        test = resp
        |batch = Batch()
        client = bytes(stream_key[8:])

    return 2 * a
=-=
def main():
    |batch = Batch()
    client = bytes(stream_key[8:])

    return 2 * a
=-=-=

Name: Raise statement lower t2

=-=
def |main():
    for stream_key, records in resp:
        test = resp
        batch = Batch()
        client = bytes(stream_key[8:])

    return 2 * a
=-=
|test = resp
batch = Batch()
client = bytes(stream_key[8:])
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-param-inner)))

Name: Raise param inner t1

=-=
var = call(arg1,
           |kw1=[],
           kw2='a, b')
=-=
var = call(|kw1=[])
=-=-=

Name: Raise param inner t2

=-=
var = call(|arg1,
           kw1=[],
           kw2='a, b')
=-=
var = call(|arg1)
=-=-=

Name: Raise param inner t3

=-=
return func(k, func(n1, n|2), *args, **kwargs)
=-=
return func(k, func(|n2), *args, **kwargs)
=-=-=

Name: Raise param inner t4

=-=
return func(k, func(|n2), *args, **kwargs)
=-=
return func(k, |n2, *args, **kwargs)
=-=-=

Name: Raise param inner t5

=-=
return func(k, |n2, *args, **kwargs)
=-=
return func(|n2)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-lower))
    (apply #'evil-shift-right (evil-ts-obj-last-range)))

Name: Last range with raise t1

=-=
def main():
    for t in range(3):
        t = 3
        break
    else:
        |t =1
        bb = 3
    return 2 * a
=-=
def main():
    for t in range(3):
        t = 3
        break
        t =1
        bb = 3
    return 2 * a
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-raise)
    (apply #'evil-ts-obj-raise (evil-ts-obj-param-lower)))

Name: Raise param lower t1

=-=
def main(par1, |par2,
         par3, par4):
    pass
=-=
def main(|par2,
         par3, par4):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-raise)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-upper)))

Name: Raise statement upper t1

=-=
if a is not None and| a > 0 and a < 8:
    pass
=-=
if |a is not None and a > 0:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-visual-char)
    (call-interactively #'evil-ts-obj-statement-inner)
    (call-interactively #'evil-ts-obj-statement-inner)
    (call-interactively #'evil-ts-obj-raise))

Name: Raise of selected region t1

=-=
for v1, v2 in l():
    v = call(|v1,
             v2)
    var2 *= var1
    return
=-=
|v = call(v1,
         v2)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-raise (evil-inner-symbol)))

Name: Raise with simple text object t1

=-=
v|ar2 *= var
=-=
|var2
=-=-=

Name: Raise with simple text object t2

=-=
for v1 in l(v1, v|3=(1,3)):
    pass
=-=
for v1 in l(|v3):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-next-largest-thing)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer)))

Name: Swap outer params t1

=-=
def main(p|ar1, par2, par3):
    pass
=-=
def main(par2, |par1, par3):
    pass
=-=-=

Name: Swap outer params t2

=-=
def main(p|1, t=call(nest1,
                    nest2,
                    nest3), k=par3):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p1, k=par3):
    pass
=-=-=

Name: Swap outer params t3

=-=
def main(par1, |t=call(nest1,
                      nest2,
                      nest3), k="par3", p=p):
    pass
=-=
def main(par1, k="par3", |t=call(nest1,
                                nest2,
                                nest3), p=p):
    pass
=-=-=

Name: Swap outer params t4

=-=
def main(|p=call2(n,
                 m), t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p=call2(n,
                                m), par1,):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-previous-largest-thing)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer)))

Name: Swap outer params t5

=-=
def main(p=call2(n,
                 m), |t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(|t=call(nest1,
                nest2,
                nest3), p=call2(n,
                                m), par1,):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))
    (evil-ts-obj-same-next-thing)
    (should-error (apply #'evil-ts-obj-swap (evil-ts-obj-param-outer))))

Name: Swap intersected params t1

Swap of intersected ranges are not allowed

=-=
def main(par1, p|ar2, par3):
    pass
=-=
def main(par1, par2, |par3):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-up 1))


Name: Swap drag up t1

=-=
def main(p=call2(n,
                 m), |t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(|t=call(nest1,
                nest2,
                nest3), p=call2(n,
                                m), par1,):
    pass
=-=-=

Name: Swap drag up t2

=-=
if i is not None and i > 0 and |i < 8:
   pass
=-=
if i is not None and |i < 8 and i > 0:
   pass
=-=-=

Name: Swap drag up t3

=-=
if i is not None and |i < 8 and i > 0:
   pass
=-=
if |i < 8 and i is not None and i > 0:
   pass
=-=-=

Name: Swap drag up t3

=-=
i=3
if |i < 8 and i is not None and i > 0:
   pass
=-=
i=3
if |i < 8 and i is not None and i > 0:
   pass
=-=-=

Name: Swap drag up t4

=-=
def f2():
    pass

@mydec
def main():
    pass

|def func(t, **kwargs):
    pass
=-=
def f2():
    pass

|def func(t, **kwargs):
    pass

@mydec
def main():
    pass
=-=-=


Name: Swap drag up t5

=-=
def func(**kwargs):
    i =3
    |call(i)
=-=
def func(**kwargs):
    |call(i)
    i =3
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-down 1))


Name: Swap drag down t1

=-=
def main(|p=call2(n,
                 m), t=call(nest1,
                            nest2,
                            nest3), par1,):
    pass
=-=
def main(t=call(nest1,
                nest2,
                nest3), |p=call2(n,
                                m), par1,):
    pass
=-=-=

Name: Swap drag down t2

=-=
if i is not None and |i > 0 and #comm
   i < 8:
   pass
=-=
if i is not None and i < 8 and #comm
   |i > 0:
   pass
=-=-=

Name: Swap drag down t3

=-=
if i is not None and i < 8 and |i > 0:
   pass
=-=
if i is not None and i < 8 and |i > 0:
   pass
=-=-=

Name: Swap drag down t4

=-=
def m():
    i = 0
    |if i is not None and i < 8 and i > 0:
        pass
    #comm
    i *= 3
=-=
def m():
    i = 0
    i *= 3
    #comm
    |if i is not None and i < 8 and i > 0:
        pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-down 2))


Name: Swap drag down with count arg t1

=-=
def main(|p=call2(n,
                 m), par2, par3,):
    pass
=-=
def main(par3, par2, |p=call2(n,
                             m),):
    pass
=-=-=

Name: Swap drag down with count arg t2

=-=
def main(par1, |par2, par3,):
    pass
=-=
def main(par1, par3, |par2,):
    pass
=-=-=

Name: Swap drag down with count arg t3

=-=
@pytest.mark.skip
|@mydec.temp()
def premain():
    pass

@mydec
def main():
    pass

def func(t, **kwargs):
    pass
=-=
def func(t, **kwargs):
    pass

@mydec
def main():
    pass

|@pytest.mark.skip
@mydec.temp()
def premain():
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-drag-up 3))


Name: Swap drag up with count arg t1

=-=
def main(par1, par2, par3, |p=call2(n,
                                   m)):
    pass
=-=
def main(|p=call2(n,
                 m), par2, par3, par1):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-compound-outer))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-compound-outer)))

Name: Clone after compound outer t1

=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
    if v:
        return call(v=v,
                    cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-compound-outer))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-compound-inner)))

Name: Clone after compound outer t2

=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
        if v:
            return call(v=v,
                        cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-statement-lower)))

Name: Clone after statement lower t1

=-=
def main(v):
    |v = 3
    return call(v=v,
                cv=13)
=-=
def main(v):
    |v = 3
    return call(v=v,
                cv=13)
    v = 3
    return call(v=v,
                cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-statement-inner)))

Name: Clone after statement lower t2

=-=
def main(v):
    |v = 3
    return call(v=v,
                cv=13)
=-=
def main(v):
    |v = 3
    v = 3
    return call(v=v,
                cv=13)
    return call(v=v,
                cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-outer))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-outer)))

Name: Clone after param outer t1

=-=
var = call(arg1, kw1=1, |kw2='a, b')
=-=
var = call(arg1, kw1=1, |kw2='a, b', kw2='a, b')
=-=-=

Name: Clone after param outer t2

=-=
var = call(arg1, |kw1=1, kw2='a, b')
=-=
var = call(arg1, |kw1=1, kw1=1, kw2='a, b')
=-=-=

Name: Clone after param outer t3

=-=
var = call(arg1,
           |kw1=1,
           kw2='a, b')
=-=
var = call(arg1,
           |kw1=1,
           kw1=1,
           kw2='a, b')
=-=-=

Name: Clone after param outer t4

=-=
var = call(arg1,
           kw1=1,
           |kw2='a, b')
=-=
var = call(arg1,
           kw1=1,
           |kw2='a, b',
           kw2='a, b')
=-=-=

Name: Clone after param outer t5

=-=
var = call(arg1
           , |kw1=[]
           , kw2='a, b')
=-=
var = call(arg1
           , |kw1=[]
           , kw1=[]
           , kw2='a, b')
=-=-=

Name: Clone after param outer t6

=-=
var = call(arg1
           , kw1=[]
           , |kw2='a, b')
=-=
var = call(arg1
           , kw1=[]
           , |kw2='a, b'
           , kw2='a, b')
=-=-=

Name: Clone after param outer t7

=-=
var = call(arg1, |kw1=[],
           kw2='a, b')
=-=
var = call(arg1, |kw1=[],
           kw1=[],
           kw2='a, b')
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-upper))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-upper)))

Name: Clone after param upper t1

=-=
func(k, |func(k), *args, **kwargs)
=-=
func(k, |func(k), k, func(k), *args, **kwargs)
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-lower))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-param-lower)))

Name: Clone after param lower t1

=-=
var = call(arg1, |kw1=1,
           kw2='a, b')
=-=
var = call(arg1, kw1=1,
           kw2='a, b', kw1=1,
           kw2='a, b')
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-after (evil-ts-obj-compound-outer))
    (apply #'evil-upcase (evil-ts-obj-last-range)))

Name: Last range with clone after t1

=-=
for var1, var2 in call():
    ar1 +=1
    |var2 *= var1
    return

var = 1
=-=
for var1, var2 in call():
    ar1 +=1
    var2 *= var1
    return
VAR2 *= VAR1
RETURN

var = 1
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-outer))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-outer)))

Name: Clone before compound outer t1

=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
=-=
def main(v):
    if v:
        return call(v=v,
                    cv=13)
    |if v:
        return call(v=v,
                    cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-outer))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-inner)))

Name: Clone before compound outer t2

=-=
def main(v):
    |if v:
        return call(v=v,
                    cv=13)
=-=
def main(v):
    if v:
        if v:
            return call(v=v,
                        cv=13)
        |return call(v=v,
                    cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-lower)))

Name: Clone before statement lower t1

=-=
def main(v):
    |v = 3
    return call(v=v,
                cv=13)
=-=
def main(v):
    v = 3
    return call(v=v,
                cv=13)
    |v = 3
    return call(v=v,
                cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-inner)))

Name: Clone before statement lower t2

=-=
def main(v):
    |v = 3
    return call(v=v,
                cv=13)
=-=
def main(v):
    v = 3
    return call(v=v,
                cv=13)
    |v = 3
    return call(v=v,
                cv=13)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-inner))
    (evil-ts-obj-previous-statement)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-inner)))

Name: Clone before statement w/o newline t1

=-=
var = call(t, p)
if |True:
    pass
=-=
var = True |call(t, p)
if True:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-inner))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-outer)))

Name: Clone condition before compound t1

=-=
var = call(t, p)
if| True or call(m,
                p) and
   False:
    pass
call()
=-=
var = call(t, p)
True or call(m,
             p) and
False
if| True or call(m,
                p) and
   False:
    pass
call()
=-=-=

Name: Clone condition before compound t2

=-=
var = call(t, p)
if True or call(m, p) and
   |False:
    pass
call()
=-=
var = call(t, p)
False
if True or call(m, p) and
   |False:
    pass
call()
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-outer))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-outer))
    (delete-trailing-whitespace))

Name: Clone before param outer t1

=-=
var = call(arg1, kw1=1, |kw2='a, b')
=-=
var = call(arg1, kw1=1, kw2='a, b', |kw2='a, b')
=-=-=

Name: Clone before param outer t2

=-=
var = call(arg1, |kw1=1, kw2='a, b')
=-=
var = call(arg1, kw1=1, |kw1=1, kw2='a, b')
=-=-=

Name: Clone before param outer t3

=-=
var = call(arg1,
           |kw1=1,
           kw2='a, b')
=-=
var = call(arg1,
           kw1=1,
           |kw1=1,
           kw2='a, b')
=-=-=

Name: Clone before param outer t4

=-=
var = call(arg1,
           kw1=1,
           |kw2='a, b')
=-=
var = call(arg1,
           kw1=1,
           kw2='a, b',
           |kw2='a, b')
=-=-=

Name: Clone before param outer t5

=-=
var = call(arg1
           , |kw1=[]
           , kw2='a, b')
=-=
var = call(arg1
           , kw1=[]
           , |kw1=[]
           , kw2='a, b')
=-=-=

Name: Clone before param outer t6

=-=
var = call(arg1
           , kw1=[]
           , |kw2='a, b')
=-=
var = call(arg1
           , kw1=[]
           , kw2='a, b'
           , |kw2='a, b')
=-=-=

Name: Clone before param outer t7

=-=
var = call(arg1, arg2,
           |kw1=[], kw2='a, b')
=-=
var = call(arg1, arg2,
           kw1=[],
           |kw1=[], kw2='a, b')
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-upper))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-upper)))

Name: Clone before param upper t1

=-=
func(k, |func(k), *args, **kwargs)
=-=
func(k, func(k), k, |func(k), *args, **kwargs)
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-lower))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-param-lower)))

Name: Clone before param lower t1

=-=
var = call(arg1, |kw1=1,
           kw2='a, b')
=-=
var = call(arg1, kw1=1,
           kw2='a, b', |kw1=1,
           kw2='a, b')
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-statement-lower))
    (apply #'evil-ts-obj-clone-before (evil-ts-obj-compound-outer))
    (apply #'evil-upcase (evil-ts-obj-last-range)))

Name: Last range with clone before t1

=-=
var = 1
for var1, var2 in call():
    ar1 +=1
    |var2 *= var1
    return
=-=
var = 1
VAR2 *= VAR1
RETURN
for var1, var2 in call():
    ar1 +=1
    var2 *= var1
    return
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-clone-after-dwim))

Name: Clone after dwim t1

=-=
if True or |call():
    pass
=-=
if True or |call() or call():
    pass
=-=-=

Name: Clone after dwim t2

=-=
    var |= 3
    pass
=-=
    var |= 3
    var = 3
    pass
=-=-=

Name: Clone after dwim t3

=-=
    b = True or |call()
    pass
=-=
    b = True or |call() or call()
    pass
=-=-=

Name: Clone after dwim t4

=-=
    if |True:
        pass
=-=
    if |True True:
        pass
=-=-=

Name: Clone after dwim t5

=-=
def main(v):
    if v:
        return |call(v=v,
                    cv=13)
=-=
def main(v):
    if v:
        return |call(v=v,
                    cv=13)
        call(v=v,
             cv=13)
=-=-=

Name: Clone after dwim t6

=-=
def main(v):
    return call(v=v, cv=13) + |call2('st')
=-=
def main(v):
    return call(v=v, cv=13) + |call2('st')
    call2('st')
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-clone-before-dwim))

Name: Clone before dwim t1

=-=
if |True or call():
    pass
=-=
if True or |True or call():
    pass
=-=-=

Name: Clone before dwim t2

=-=
    pass
    var |= 3
=-=
    pass
    var = 3
    var |= 3
=-=-=

Name: Clone before dwim t3

=-=
    b = |True or call()
    pass
=-=
    b = True or True or call()
    pass
=-=-=

Name: Clone before dwim t4

=-=
    if |True:
        pass
=-=
    if True |True:
        pass
=-=-=

Name: Clone before dwim t5

=-=
def main(v):
    if v:
        return |call(v=v,
                    cv=13)
=-=
def main(v):
    if v:
        return call(v=v,
                    cv=13)
        |call(v=v,
             cv=13)
=-=-=

Name: Clone before dwim t6

=-=
def main(v):
    return call(v=v, cv=13) + |call2('st')
=-=
def main(v):
    return call(v=v, cv=13) + call2('st')
    |call2('st')
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-extract-up (evil-ts-obj-statement-lower))
    (delete-trailing-whitespace))

Name: Extract up lower statements t1

=-=
def main(v):
    if True:
        |var = call(t, p)
        return call(v=v, cv=13) + call2('st')
    call()
=-=
def main(v):
    |var = call(t, p)
    return call(v=v, cv=13) + call2('st')
    if True:
        pass
    call()
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-extract-up-dwim 1)
    (delete-trailing-whitespace))

Name: Extract up dwim t1

=-=
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
def main(v):
    |var = call(t, p)
    if True:
        pass
    call()
=-=-=

Name: Extract up dwim t2

=-=
def main(v):
    if True:
        var = call(|t, p)
    call()
=-=
def main(v):
    if True:
        |call(t, p)
        var =
    call()
=-=-=

Name: Extract up dwim t3

=-=
def main(v):
    if |True:
        var = call(t, p)
    call()
=-=
def main(v):
    |True
    if :
        var = call(t, p)
    call()
=-=-=

Name: Extract up dwim t4

=-=
def main(v):
    if| True and
       False:
        var = call(t, p)
    call()
=-=
def main(v):
    |True and
    False
    if :
        var = call(t, p)
    call()
=-=-=

Name: Extract up dwim t5

=-=
|def main(v):
    pass
=-=
|def main(v):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-extract-up-dwim 2)
    (delete-trailing-whitespace))

Name: Extract up dwim 2 levels t1

=-=
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
|var = call(t, p)
def main(v):
    if True:
        pass
    call()
=-=-=




Name: Extract up dwim 2 levels t2

=-=
def main(v):
    if True:
        var = call(|t, p)
    call()
=-=
def main(v):
    |call(t, p)
    if True:
        var =
    call()
=-=-=

Name: Extract up dwim 2 levels t3

=-=
def main(v):
    if |True:
        var = call(t, p)
    call()
=-=
|True
def main(v):
    if :
        var = call(t, p)
    call()
=-=-=

Name: Extract up dwim 2 levels t4

=-=
def main(v):
    if True and |False:
        var = call(t, p)
    call()
=-=
def main(v):
    |False
    if True and :
        var = call(t, p)
    call()
=-=-=

Name: Extract up dwim 2 levels t5

=-=
@dec
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
|var = call(t, p)
@dec
def main(v):
    if True:
        pass
    call()
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-extract-up-dwim 9)
    (delete-trailing-whitespace))

Name: Extract up dwim 9 levels t1

=-=
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
|var = call(t, p)
def main(v):
    if True:
        pass
    call()
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-extract-down (evil-ts-obj-statement-upper))
    (delete-trailing-whitespace))

Name: Extract down upper statements t1

=-=
def main(v):
    if True:
        var = call(t, p)
        |return call(v=v, cv=13) + call2('st')
    call()
=-=
def main(v):
    if True:
        pass
    |var = call(t, p)
    return call(v=v, cv=13) + call2('st')
    call()
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-extract-down-dwim 1)
    (delete-trailing-whitespace))

Name: Extract down dwim t1

=-=
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
def main(v):
    if True:
        pass
    |var = call(t, p)
    call()
=-=-=

Name: Extract down dwim t2

=-=
def main(v):
    if True:
        var = call(|t, p)
    call()
=-=
def main(v):
    if True:
        var =
        |call(t, p)
    call()
=-=-=

Name: Extract down dwim t3

=-=
def main(v):
    if |True:
        var = call(t, p)
    call()
=-=
def main(v):
    if :
        var = call(t, p)
    |True
    call()
=-=-=

Name: Extract down dwim t4

=-=
def main(v):
    if| True and
       False:
        var = call(t, p)
    call()
=-=
def main(v):
    if :
        var = call(t, p)
    |True and
    False
    call()
=-=-=

Name: Extract down dwim t5

=-=
|def main(v):
    pass
=-=
|def main(v):
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-extract-down-dwim 2)
    (delete-trailing-whitespace))

Name: Extract down dwim two levels t1

=-=
def main(v):
    if True:
        |var = call(t, p)
    call()
=-=
def main(v):
    if True:
        pass
    call()
|var = call(t, p)
=-=-=


Name: Extract down dwim two levels t2

=-=
def main(v):
    if True:
        var = call(|t, p)
    call()
=-=
def main(v):
    if True:
        var =
    |call(t, p)
    call()
=-=-=

Name: Extract down dwim two levels t3

=-=
def main(v):
    if |True:
        var = call(t, p)
    call()
=-=
def main(v):
    if :
        var = call(t, p)
    call()
|True
=-=-=

Name: Extract down dwim 2 levels t4

=-=
def main(v):
    if True and |False:
        var = call(t, p)
    call()
=-=
def main(v):
    if True and :
        var = call(t, p)
    |False
    call()
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-inject-down-dwim 1)
    (delete-trailing-whitespace))

Name: Inject down dwim  t1

=-=
|i = 3
def main():
    while True:
        call(i)
=-=

def main():
    |i = 3
    while True:
        call(i)
=-=-=

Name: Inject down dwim  t2

=-=
def main():
    |i = 3
    while True:
        call(i)
=-=
def main():

    while True:
        |i = 3
        call(i)
=-=-=

Name: Inject down dwim  t3

=-=
def main():
    |i = 3
    while True:
        pass
    i = 0
=-=
def main():

    while True:
        |i = 3
    i = 0
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-inject-down-dwim 2)
    (delete-trailing-whitespace))

Name: Inject down dwim two levels t1

=-=
|i = 3
def main():
    while True:
        call(i)
=-=

def main():
    while True:
        |i = 3
        call(i)
=-=-=

Name: Inject down dwim two levels t2

=-=
|i = 3
def main():
    i = 0
    while True:
        call(i)
=-=

def main():
    i = 0
    while True:
        |i = 3
        call(i)
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-inject-up-dwim 1)
    (delete-trailing-whitespace))

Name: Inject up dwim  t1

=-=
def main():
    while True:
        call(i)
|i = 3
=-=
def main():
    while True:
        call(i)
    |i = 3
=-=-=

Name: Inject up dwim  t2

=-=
def main():
    while True:
        call(i)
    |i = 3
=-=
def main():
    while True:
        call(i)
        |i = 3
=-=-=

Name: Inject up dwim  t3

=-=
def main():
    while True:
        ...
    |i = 3
=-=
def main():
    while True:
        |i = 3
=-=-=

Name: Inject up dwim  t3

=-=
def main():
    while True:
        ...
    |i = 3

    while False:
        i = 3
=-=
def main():
    while True:
        |i = 3


    while False:
        i = 3
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-inject-up-dwim 2)
    (delete-trailing-whitespace))

Name: Inject up dwim two levels t1

=-=
def main():
    while True:
        call(i)
|i = 3
=-=
def main():
    while True:
        call(i)
        |i = 3
=-=-=

Name: Inject up dwim two levels t2

=-=
def main():
    while True:
        call(i)
    i = -1
|i = 3
=-=
def main():
    while True:
        call(i)
        |i = 3
    i = -1
=-=-=

Name: Inject up dwim two levels t3

=-=
def main():
    i = 0
    while True:
        call(i)
    i = -1
|i = 3
=-=
def main():
    i = 0
    while True:
        call(i)
        |i = 3
    i = -1
=-=-=

Name: Inject up dwim two levels t4

=-=
def main():
    while True:
        call(i)
    while False:
        call(i+1)
    i = -1
|i = 3
=-=
def main():
    while True:
        call(i)
    while False:
        call(i+1)
        |i = 3
    i = -1
=-=-=

Name: Inject up dwim  t5

=-=
def main():
    while True:
        if False:
            ...
    |i = 3

    while False:
        i = 3
=-=
def main():
    while True:
        if False:
            |i = 3


    while False:
        i = 3
=-=-=

Name: Inject up dwim  t6

=-=
def main():
    match t:
        case ok:
            pass
    |i = 3

    while False:
        i = 0
=-=
def main():
    match t:
        case ok:
            |i = 3


    while False:
        i = 0
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-inject-up)
    (apply #'evil-ts-obj-inject-up (evil-ts-obj-statement-lower))
    (delete-trailing-whitespace))

Name: Inject up statement lower t1

=-=
def main():
    while True:
        call(i)
    i = 0
    while False:
        pass
    |v = call(i+1)
    i = -1
=-=
def main():
    while True:
        call(i)
    i = 0
    while False:
        |v = call(i+1)
        i = -1
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (apply #'evil-ts-obj-extract-up (evil-ts-obj-compound-inner))
    (apply #'evil-ts-obj-inject-up (evil-ts-obj-last-range))
    (delete-trailing-whitespace))

Name: Inject up last range t1

=-=
def main():
    if True:
        pass
    while True:
        |i = 3
        i = 5 - 8 * 3
=-=
def main():
    if True:
        |i = 3
        i = 5 - 8 * 3

    while True:
        pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-visual-line)
    (call-interactively #'evil-ts-obj-inject-up)
    (delete-trailing-whitespace))

Name: Inject up visual line t1

=-=
def main():
    if True:
        pass
    |i = 3
    ii = 0
=-=
def main():
    if True:
        |i = 3

    ii = 0
=-=-=



Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-slurp 1)
    (delete-trailing-whitespace))

Name: Slurp t1

=-=
def |main():
    while True:
        call(i)
i = 3
=-=
def |main():
    while True:
        call(i)
    i = 3
=-=-=

Name: Slurp t2

=-=
def main():
    while| True:
        pass
    i = 3
=-=
def main():
    while| True:
        i = 3
=-=-=

Name: Slurp t3

=-=
def main():
    i = 9
    |while True:
        pass
    i = 3
=-=
def main():

    |while True:
        i = 9
    i = 3
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-slurp 2)
    (delete-trailing-whitespace))

Name: Slurp two siblings t1

=-=
def |main():
    while True:
        call(i)
i = 3
call(3)
v = 2
=-=
def |main():
    while True:
        call(i)
    i = 3
    call(3)

v = 2
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-barf 1)
    (delete-trailing-whitespace))

Name: Barf t1

=-=
|def main():
    i = 3
    while True:
        i = call(i)
=-=
i = 3
|def main():

    while True:
        i = call(i)
=-=-=

Name: Barf t2

=-=
def main():
    |i = 3
    while True:
        i = call(i)
=-=
def main():
    |i = 3

while True:
    i = call(i)
=-=-=

Name: Barf t3

=-=
def main():
    i = 3
    |while True:
        i = call(i)
=-=
def main():
    i = 3
    i = call(i)
    |while True:
        pass
=-=-=

Name: Barf t4

=-=
def main():
    i = 3
    while True:
        |i = call(i)
=-=
def main():
    i = 3
    while True:
        |pass
    i = call(i)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-barf 2)
    (delete-trailing-whitespace))

Name: Barf 2 statements t1

=-=
def main():
    while True:
        i = 3
        |i = call(i)
        j = call(i)
=-=
def main():
    while True:
        i = 3
|
    i = call(i)
    j = call(i)
=-=-=

Name: Barf 2 statements t2

=-=
def main():
    |while True:
        i = 3
        i = call(i)
        j = call(i)
=-=
def main():
    i = 3
    i = call(i)
    |while True:

        j = call(i)
=-=-=
