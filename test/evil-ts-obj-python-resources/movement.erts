Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-same-next-largest-thing))

Name: next sibling of current thing t1

=-=
def temp(t, **kwargs):
    t = |3

def func(*args):
    a = 3
=-=
def temp(t, **kwargs):
    t = 3

def func(*args):
    |a = 3
=-=-=

Name: next sibling of current thing t2

=-=
def temp(t, **kwa|rgs):
    t = 3

def func(*args):
    a = 3
=-=
def temp(t, **kwargs):
    t = 3

def func(|*args):
    a = 3
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-next-largest-thing))

Name: next sibling t1

=-=
def |temp(t, **kwargs):
    t = 3

def func(*args):
    a = 3
=-=
def temp(t, **kwargs):
    t = 3

|def func(*args):
    a = 3
=-=-=


Name: next sibling t4

=-=
def temp(|temp1:TempC=TempC(a=1, c=8), s:str='s, tr'):
    t = 3
=-=
def temp(temp1:TempC=TempC(a=1, c=8), |s:str='s, tr'):
    t = 3
=-=-=

Name: next sibling t5

=-=
def temp(temp1:TempC=Te|mpC(a=1, c=8), s:str='s, tr'):
    t = 3
=-=
def temp(temp1:TempC=TempC(a=1, c=8), |s:str='s, tr'):
    t = 3
=-=-=

Name: next sibling t6

tempf() is considered to be the closest thing to the point
So jump to its next sibling for loop.

=-=
def func1():
  |  tempf()
    for stream_key, records in resp:
        pass
    return 2

def func2():
    pass
=-=
def func1():
    tempf()
    |for stream_key, records in resp:
        pass
    return 2

def func2():
    pass
=-=-=

Name: next sibling t7

=-=
def func1():
    for i in| range(3, 10):
        a = 3
        if i % 2 == 0:
            pass
    if True:
        pass
=-=
def func1():
    for i in range(3, 10):
        a = 3
        if i % 2 == 0:
            pass
    |if True:
        pass
=-=-=

Name: next sibling t8

=-=
def func1():
    for i in range(3, 10):
        a = 3
  |      if i % 2 == 0:
            pass
        if False:
            pass
    if True:
        pass
=-=
def func1():
    for i in range(3, 10):
        a = 3
        if i % 2 == 0:
            pass
        |if False:
            pass
    if True:
        pass
=-=-=

Name: next sibling t9

=-=
def func1():
    aa *= 8
    |if i % 2 == 0:
        aa *= 3
    print(here)
=-=
def func1():
    aa *= 8
    if i % 2 == 0:
        aa *= 3
    |print(here)
=-=-=

Name: next sibling t10

=-=
|

def func1():
    print()
=-=


|def func1():
    print()
=-=-=

Name: next sibling t11

=-=
def func1():
    aa *= 8
    if i % 2 == 0:
        |aa *= 3
    print(here)
=-=
def func1():
    aa *= 8
    if i % 2 == 0:
        aa *= 3
    |print(here)
=-=-=

Name: next sibling t12

=-=
def func(|a=1, #a1
         b=3, #b3
         c =4):
    pass
=-=
def func(a=1, #a1
         |b=3, #b3
         c =4):
    pass
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-previous-largest-thing))

Name: prev sibling t1

=-=
def temp(temp1:TempC=TempC(a=1, c=8), |s:str='s, tr'):
    t = 3
=-=
def temp(|temp1:TempC=TempC(a=1, c=8), s:str='s, tr'):
    t = 3
=-=-=

Name: prev sibling t2

=-=
def temp(temp1:TempC=TempC(a=1, c=8), s:str|='s, tr'):
    t = 3
=-=
def temp(|temp1:TempC=TempC(a=1, c=8), s:str='s, tr'):
    t = 3
=-=-=

Name: prev sibling t3

return statement is considered closest thing to the point
So jump to its prev sibling for statement

=-=
def func2():
    pass

def func1():
    tempf()
    for stream_key, records in resp:
        pass
|    return 2
=-=
def func2():
    pass

def func1():
    tempf()
    |for stream_key, records in resp:
        pass
    return 2
=-=-=

Name: prev sibling t4

=-=
def func1():
    for i in range(3, 10):
        a = 3
        if i % 2 == 0:
            pass
    if T|rue:
        pass
=-=
def func1():
    |for i in range(3, 10):
        a = 3
        if i % 2 == 0:
            pass
    if True:
        pass
=-=-=

Name: prev sibling t5

=-=
def func1():
    for i in range(3, 10):
        pass
    if True:
        a = 3
        if i % 2 == 0:
            pass
  |      if False:
            pass
=-=
def func1():
    for i in range(3, 10):
        pass
    if True:
        a = 3
        |if i % 2 == 0:
            pass
        if False:
            pass
=-=-=

Name: prev sibling t6

=-=
def func1():
    aa *= 8
    if i % 2 == 0:
        aa *= 3
    |print(here)
=-=
def func1():
    aa *= 8
    |if i % 2 == 0:
        aa *= 3
    print(here)
=-=-=

Name: prev sibling t7

=-=
def func1():
    print()

|
=-=
|def func1():
    print()


=-=-=

Name: prev sibling t8

=-=
def func1():
    aa *= 8
    if i % 2 == 0:
        |aa *= 3
    print(here)
=-=
def func1():
    aa *= 8
    |if i % 2 == 0:
        aa *= 3
    print(here)
=-=-=

Name: prev sibling t9

=-=
def func1():
    pass

@dec
def func2():
    pass

def |func3():
    pass
=-=
def func1():
    pass

@dec
|def func2():
    pass

def func3():
    pass
=-=-=

=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-next-thing))

Name: next thing t1

=-=
this|_is = func(1, temp1=TempC([1], [3]), ab='83, 8',)
=-=
this_is = func(|1, temp1=TempC([1], [3]), ab='83, 8',)
=-=-=

Name: next thing t2

=-=
this_is = func(|1, temp1=TempC([1], [3]), ab='83, 8',)
=-=
this_is = func(1, |temp1=TempC([1], [3]), ab='83, 8',)
=-=-=

Name: next thing t3

=-=
this_is = func(1, |temp1=TempC([1], [3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC(|[1], [3]), ab='83, 8',)
=-=-=

Name: next thing t4

=-=
this_is = func(1, temp1=TempC(|[1], [3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([|1], [3]), ab='83, 8',)
=-=-=

Name: next thing t5

=-=
this_is = func(1, temp1=TempC([|1], [3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], |[3]), ab='83, 8',)
=-=-=

Name: next thing t6

=-=
this_is = func(1, temp1=TempC([1], [|3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], [3]), |ab='83, 8',)
=-=-=

Name: next thing t7

=-=
this_is = func(1, temp1=TempC([1], [3]), |ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], [3]), |ab='83, 8',)
=-=-=

Name: next thing t8

=-=
|
def main():
    return 3
=-=

|def main():
    return 3
=-=-=

Name: next thing t9

=-=

def temp(var, temp=(1,2),| ):
    i = 3
=-=

def temp(var, temp=(1,2), ):
    |i = 3
=-=-=

Name: next thing t10

No next thing
=-=

def temp(var):
 |   i = 3
=-=

def temp(var):
 |   i = 3
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-previous-thing))

Name: previous thing t1

=-=
this_is = func(1, temp1=TempC([1], [3]), |ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], [|3]), ab='83, 8',)
=-=-=

Name: previous thing t2

=-=
this_is = func(1, temp1=TempC([1], [|3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], |[3]), ab='83, 8',)
=-=-=

Name: previous thing t3

=-=
this_is = func(1, temp1=TempC([1], [|3]), ab='83, 8',)
=-=
this_is = func(1, temp1=TempC([1], |[3]), ab='83, 8',)
=-=-=

Name: previous thing t4

=-=
this_is = func(1, temp1=TempC(|[1], [3]), ab='83, 8',)
=-=
this_is = func(1, |temp1=TempC([1], [3]), ab='83, 8',)
=-=-=

Name: previous thing t5

=-=
this_is = func(|1, temp1=TempC([1], [3]), ab='83, 8',)
=-=
|this_is = func(1, temp1=TempC([1], [3]), ab='83, 8',)
=-=-=

Name: previous thing t6

=-=
|this_is = func(1, temp1=TempC([1], [3]), ab='83, 8',)
=-=
|this_is = func(1, temp1=TempC([1], [3]), ab='83, 8',)
=-=-=

Name: previous thing t7

=-=

def temp(var, temp=(1,2),| ):
    i = 3
=-=

def temp(var, temp=(1,|2), ):
    i = 3
=-=-=

Name: previous thing t8

=-=

def temp(var, temp=(1,2)|, ):
    i = 3
=-=

def temp(var, temp=(1,|2), ):
    i = 3
=-=-=

Name: previous thing t9
Jump to the previous thing not to the beginning of the current thing

=-=
def temp(var):
    i = 3
    i +=| 3
=-=
def temp(var):
    |i = 3
    i += 3
=-=-=

Name: previous thing t10

=-=
if True:
    pass
elif not b:
    b| = 38
=-=
if True:
    pass
|elif not b:
    b = 38
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-beginning-of-thing))

Name: begin of thing t1

=-=
def temp(t, **kwa|rgs):
    t = 3
=-=
def temp(t, |**kwargs):
    t = 3
=-=-=

Name: begin of thing t2

=-=
def temp(t, |**kwargs):
    t = 3
=-=
|def temp(t, **kwargs):
    t = 3
=-=-=

Name: begin of thing else/if clause t1

=-=
if True:
    pass
else:
    |pass
=-=
if True:
    pass
|else:
    pass
=-=-=

Name: begin of thing else/if clause t2

=-=
if True:
    pass
|else:
    pass
=-=
|if True:
    pass
else:
    pass
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (evil-ts-obj-end-of-thing))

Name: end of thing t1

=-=
def temp(t, **|kwargs):
    t = 3
=-=
def temp(t, **kwarg|s):
    t = 3
=-=-=

Name: end of thing t2

=-=
def temp(t, **kwargs|):
    t = 3
=-=
def temp(t, **kwargs):
    t = |3
=-=-=

Name: end of thing t3

=-=
def temp(t, **kwargs| ):
    t = 3
=-=
def temp(t, **kwargs ):
    t = |3
=-=-=

This test does not work without better-jumper
Code:
  (lambda ()
    (evil-ts-obj-python-tests-setup)
    (let ((evil--jumps-window-jumps (make-hash-table)))
        (evil-ts-obj-end-of-thing)
        (evil-jump-backward)))

Name: end of thing jump backward

Skip: t

=-=
def temp(t, **kwargs|):
    t = 3
=-=
def temp(t, **kwargs|):
    t = 3
=-=-=

=-=-=
