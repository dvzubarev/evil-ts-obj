Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-raise-dwim 1))

Name: Raise dwim t1

=-=
if [[ $v -eq 1 ]]; then
    echo e; echo t
elif [[ $v -eq 0 ]]; then
    |echo t
elif [[ $v -eq 0 ]]; then
    echo t
fi
=-=
if [[ $v -eq 1 ]]; then
    echo e; echo t
echo t
elif [[ $v -eq 0 ]]; then
    echo t
fi
=-=-=


Name: Raise dwim t2

=-=
echo one |two "three, four"
=-=
echo |two
=-=-=

Name: Raise dwim t3

=-=
echo one two "t|hree, four"
=-=
echo |"three, four"
=-=-=

Name: Raise dwim t4

=-=
echo |"three, four"
=-=
|"three, four"
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-raise-dwim 2))

Name: Raise dwim two levels t1

=-=
if [[ $v -eq 1 ]]; then
    echo e; echo t
elif [[ $v -eq 0 ]]; then
    if [[ true ]]; then
        |echo t
    fi
elif [[ $v -eq 0 ]]; then
    echo t
fi
=-=
if [[ $v -eq 1 ]]; then
    echo e; echo t
|echo t
elif [[ $v -eq 0 ]]; then
    echo t
fi
=-=-=

Point-Char: @

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (setq-local evil-this-operator 'evil-ts-obj-raise)
    (apply #'evil-ts-obj-raise (evil-ts-obj-statement-lower)))

Name: Raise statement lower t1

=-=
echo t | @echo e | echo k "t t"
=-=
echo e | echo k "t t"
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-swap-dwim-down 1))

Name: swap-dwim down pipelined cmds t1

=-=
echo t | @echo e | echo k "t t"
=-=
echo t | echo k "t t" | @echo e
=-=-=

Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-swap-dwim-up 1))

Name: swap-dwim up t1

=-=
echo pr pr2 |pr3
=-=
echo pr |pr3 pr2
=-=-=

Name: swap-dwim up t2

=-=
echo --pr=setm --var temp \
     --kwarg2 \
     --kwarg3|="value with space"
=-=
echo --pr=setm --var temp \
     |--kwarg3="value with space" \
     --kwarg2
=-=-=

Name: swap-dwim up t3

=-=
echo --pr=setm --var temp \
     |--kwarg3="value with space" \
     --kwarg2
=-=
echo --pr=setm --var |--kwarg3="value with space" \
     temp \
     --kwarg2
=-=-=

Name: swap-dwim up t4

=-=
echo str1
echo str2; |echo str3
echo str4
=-=
echo str1
|echo str3; echo str2
echo str4
=-=-=

Name: swap-dwim up t5

=-=
echo str1
#comment
|echo str3; echo str2
echo str4
=-=
|echo str3
#comment
echo str1; echo str2
echo str4
=-=-=

Name: swap-dwim up t6

=-=
if [[ -n "$mode" ]] ; then
    |quoted_arg=$(_quote_arg "$buffer")
fi
=-=
if [[ -n "$mode" ]] ; then
    |quoted_arg=$(_quote_arg "$buffer")
fi
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-swap-dwim-down 1))

Name: swap-dwim down t1

=-=
|echo str1
#comment
echo str2; echo str3
echo str4
=-=
echo str2
#comment
|echo str1; echo str3
echo str4
=-=-=

Name: swap-dwim down t1

=-=
echo str2
|echo str1; echo str3
echo str4
=-=
echo str2
echo str3; |echo str1
echo str4
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-clone-after-dwim nil))

Name: clone after dwim t1

=-=
echo he \
    |ll \
    o
=-=
echo he \
    |ll \
    ll \
    o
=-=-=

Name: clone after dwim t2

=-=
echo he \
    ll \
    |o
=-=
echo he \
    ll \
    |o \
    o
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (evil-ts-obj-clone-before-dwim nil))

Name: clone before dwim t1

=-=
echo |he \
    ll \
    o
=-=
echo he \
    |he \
    ll \
    o
=-=-=

Name: clone before dwim t2

=-=
echo he \
    |ll \
    o
=-=
echo he \
    ll \
    |ll \
    o
=-=-=

Name: clone before dwim t3

=-=
echo he \
    ll \
    |o
=-=
echo he \
    ll \
    o \
    |o
=-=-=
