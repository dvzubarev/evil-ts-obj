Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-outer)))

Name: Delete function outer t1

=-=
func (){
     e|cho ""
}
=-=
|
=-=-=


Name: Delete function outer t2

=-=
function fu|nc {
     echo ""
}
=-=
|
=-=-=

Name: Delete for loop outer t1

=-=
func () {
    fo|r ((i = 0 ; i < 100 ; i++)); do
        echo $i
    done
}
=-=
func () {
    |
}
=-=-=

Name: Delete if outer t1

=-=
    if [[ -n "$SSH_CLIENT" ]]; then
        |return 0
    else
        return 1
    fi
=-=
    |
=-=-=

Name: Delete if outer t2

=-=
    if true; then
        test
    elif true; then
        e|cho lol
        return 0
    fi
=-=
    if true; then
        test
    |
    fi
=-=-=


Name: Delete if outer t3

=-=
    if [[ -n "$SSH_CLIENT" ]]; then
        return 0
    else
        retu|rn 1
    fi
=-=
    if [[ -n "$SSH_CLIENT" ]]; then
        return 0
    |
    fi
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-inner)))

Name: Delete function inner t1

=-=
func (){
    e|cho ""
    echo -n ""
}
=-=
func (){
    |
}
=-=-=

Name: Delete function inner t2

=-=
function fun|c {
    echo ""
    echo -n ""
}
=-=
function func {
    |
}
=-=-=


Name: Delete for loop inner t1

=-=
    for ((i = 0 ;| i < 100 ; i++)); do
        echo $i
        sleep 3
    done
=-=
    for ((i = 0 ; i < 100 ; i++)); do
        |
    done
=-=-=

Name: Delete while loop inner t1

=-=
while [ $# -gt 0 ]; do
  |  1
     exit
done
=-=
while [ $# -gt 0 ]; do
    |
done
=-=-=

Name: Delete if inner t1

=-=
    if true; then
 |       echo 0
        return 0
    fi
=-=
    if true; then
        |
    fi
=-=-=

Name: Delete if inner t2

=-=
if tru|e; then
    echo 0
    return 0
else
    return 1
fi
=-=
if true; then
    |
else
    return 1
fi
=-=-=

Name: Delete if inner t3

=-=
if tru|e; then
    echo 0
    return 0
elif true; then
    echo ""
fi
=-=
if true; then
    |
elif true; then
    echo ""
fi
=-=-=


Name: Delete elif inner t1

=-=
    if true; then
        test
    elif true; then
        e|cho lol
        return 0
    fi
=-=
    if true; then
        test
    elif true; then
        |
    fi
=-=-=

Name: Delete else inner t1

=-=
    if true; then
        return 0
    el|se
        echo 11
        return 1
    fi
=-=
    if true; then
        return 0
    else
        |
    fi
=-=-=

Name: Delete case inner t1

=-=
        ca|se $key in
            -sn) send_mode="1"; shift ;;
            *) files+=("$1"); shift ;;
        esac
=-=
        case $key in
            |
        esac
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-outer)))

Name: Delete statement outer t1

=-=
buffer=$(cat |/dev/stdin ; echo .)
=-=
buffer=$(|echo .)
=-=-=

Name: Delete statement outer t2

=-=
buffer=$(cat /dev/stdin ; |echo .)
=-=
buffer=$(cat /dev/stdin|)
=-=-=

Name: Delete statement outer t3

=-=
buffer=$(cat /dev/stdin ; echo .)|
=-=
|
=-=-=

Name: Delete statement outer t4

=-=
buffer=$(cat /dev/stdin ; echo . |)
=-=
|
=-=-=

Name: Delete statement outer t5

=-=
buffer=$(cat /dev/stdin ; echo .| )
=-=
buffer=$(cat /dev/stdin| )
=-=-=

Name: Delete statement outer t6

=-=
case $key in
    -s|) send_mode="1"; shift ;;
esac
=-=
case $key in
    -s) |shift ;;
esac
=-=-=


Name: Delete statement outer t7

=-=
case $key in
    -s) send_mode="1"|; shift ;;
esac
=-=
case $key in
    -s) |shift ;;
esac
=-=-=

Name: Delete statement outer t8

=-=
case $key in
    -s) send_mode="1"; |shift ;;
esac
=-=
case $key in
    -s) send_mode="1"| ;;
esac
=-=-=

Name: Delete statement outer t9

=-=
if true ; then
    echo |e
fi
=-=
if true ; then
    |
fi
=-=-=

Point-Char: @

Name: Delete statement outer t10

=-=
[[ @-z "$e" ]] && read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=
@read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=-=

Name: Delete statement outer t11
=-=
[[ -z "$e" ]] @&& read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=
@read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=-=

Name: Delete statement outer t11-2
=-=
[[ -z "$e" ]] &@& read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=
@read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=-=

Name: Delete statement outer t11-3
=-=
[[ -z "$e" ]] @ && read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=
@read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=-=

Name: Delete statement outer t12

=-=
[[ -z "$e" ]] && @read -ra files || buffer=$(cat /dev/stdin ; echo .)
=-=
[[ -z "$e" ]] && @buffer=$(cat /dev/stdin ; echo .)
=-=-=

Name: Delete statement outer t13

=-=
[[ -z "$e" ]] && read -ra files || @buffer=$(cat /dev/stdin ; echo .)
=-=
[[ -z "$e" ]] && read -ra files@
=-=-=

# Name: Delete list outer t1

# =-=
#  | [[ -z "$e" ]] && read -ra files || b|uffer=$(cat /dev/stdin ; echo .)
# =-=
#  |
# =-=-=



Name: Delete pipe statement outer t1

=-=
echo te | echo pr | echo @en
echo k
=-=
echo te | echo pr@
echo k
=-=-=

Name: Delete pipe statement outer t2

=-=
    echo b
    echo te @| echo pr | echo en
    echo e
=-=
    echo b
    @echo pr | echo en
    echo e
=-=-=

Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-inner)))

Name: Delete statement inner t1

=-=
buffer=$(cat |/dev/stdin ; echo .)
=-=
buffer=$(| ; echo .)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-upper)))

Name: Delete statement upper t1

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho e
        exit
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |
        exit
    fi
=-=-=

Name: Delete statement upper t2

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho e; echo t
        exit
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |echo t
        exit
    fi
=-=-=

Name: Delete statement upper t3

=-=
case $key in
    -s) send_mode="1"; echo t| ; shift  ;;
esac
=-=
case $key in
    -s) |shift  ;;
esac
=-=-=

Name: Delete statement upper t4

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho e
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |
    fi
=-=-=

Name: Delete statement upper t5

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho i
    else
        echo e
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |
    else
        echo e
    fi
=-=-=

Name: Delete statement upper t6

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho i
    else
        echo e
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |
    else
        echo e
    fi
=-=-=

Name: Delete statement upper t7

=-=
[[ -z "$e" ]] && read -ra files| && echo e && echo t
=-=
echo e && echo t
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-upper)))

Name: Delete compound upper t1

=-=
if [[ $v -eq 1 ]]; then
    echo test
    |for f in "${files[@]}"; do
        echo $f
    done
fi
=-=
if [[ $v -eq 1 ]]; then
    |
fi
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-lower)))

Name: Delete statement lower t1

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho e
        exit
    fi
=-=
    if [[ $v -eq 1 ]]; then
        test
        |
    fi
=-=-=

Name: Delete statement lower t2

=-=
    if [[ $v -eq 1 ]]; then
        test
        echo e; |echo t
        exit
    elif [[ $v -eq 0 ]]; then
        echo t
    fi
=-=
    if [[ $v -eq 1 ]]; then
        test
        echo e|
    elif [[ $v -eq 0 ]]; then
        echo t
    fi
=-=-=

Name: Delete statement lower t3

=-=
case $key in
    -s) send_mode="1"; echo t| ; shift  ;;
esac
=-=
case $key in
    -s) send_mode="1"|  ;;
esac
=-=-=

Name: Delete statement lower t4

=-=
    if [[ $v -eq 1 ]]; then
        e|cho e
    fi
=-=
    if [[ $v -eq 1 ]]; then
        |
    fi
=-=-=

Name: Delete statement lower t5

=-=
    if [[ $v -eq 1 ]]; then
        test
        e|cho i
    else
        echo e
    fi
=-=
    if [[ $v -eq 1 ]]; then
        test
        |
    else
        echo e
    fi
=-=-=

Name: Delete statement lower t6

=-=
[[ -z "$e" ]] && read -ra files && |echo e && echo t
=-=
[[ -z "$e" ]] && read -ra files|
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-upper)))

Name: Delete param upper t1

=-=
buffer=$(read -x -r|a files)
=-=
buffer=$(read |files)
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-bash-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-lower)))

Name: Delete param lower t1

=-=
echo here |temp str
[[ -n "$mode" ]]
=-=
echo here|
[[ -n "$mode" ]]
=-=-=
