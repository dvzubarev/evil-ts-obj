Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-outer)))

Name: Delete for loop outer t1

=-=
void func () {
    for(auto& i : items)
        |i.tf = 0;
}
=-=
void func () {
    |
}
=-=-=

Name: Delete if outer t1

=-=
if (|i > 0)
    i--;
else if (i < 0){
    i++;
    std::cout<<"\n";
} else
    i+=2;
=-=
|
=-=-=

Name: Delete if outer t2

=-=
if (i > 0)
    i--;
else if (i < 0){
    i++;
    std::cout<<"\n";
} else
    |i+=2;
=-=
if (i > 0)
    i--;
else if (i < 0){
    i++;
    std::cout<<"\n";
} |
=-=-=


Name: Delete if outer t3

=-=
if (i > 0)
    i--;
el|se if (i < 0){
    i++;
    std::cout<<"\n";
} else
    i+=2;
=-=
if (i > 0)
    i--;
|
=-=-=

Name: Delete if outer t4

=-=
if (i > 0)
    i--;
else if (|i < 0){
    i++;
    std::cout<<"\n";
} else
    i+=2;
=-=
if (i > 0)
    i--;
else |
=-=-=

Name: Delete struct outer t1

=-=
struct TStr{
    |std::string str;
};
=-=
|
=-=-=

Name: Delete templated function t1

=-=
template<class T, typename U>
inline float calc(T t, U u){
    |return t + u;
}
=-=
|
=-=-=

Name: Delete templated method t1

=-=
template<typename TTraits>
template<class T, typename U>
float
some_struct_t<TTraits>::
calc(T t, U u){
    |return t + u;
}
=-=
|
=-=-=

Name: Delete templated struct outer t1

=-=
template <class T,
          typename U>
struct TStr{
    T str;
    U| i;
};
=-=
|
=-=-=

Name: Delete templated method inside struct t1

=-=
struct st_t{
    template|<class T>
    float
    calc(T t){
        return t;
    }
};
=-=
struct st_t{
    |
};
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-inner)))

Name: Delete for loop inner t1

=-=
void func () {
    for(auto& i : items)
        |i.tf = 0;
}
=-=
void func () {
    for(auto& i : items)
        |
}
=-=-=

Name: Delete for loop inner t2

=-=
for |(int i = 0; i< 30; ++i){
    i++;
    i--;
}
=-=
for (int i = 0; i< 30; ++i){
    |
}
=-=-=

Name: Delete if inner t1

=-=
|if (i > 0)
    i--;
else
    i+=2;
=-=
if (i > 0)
    |
else
    i+=2;
=-=-=

Name: Delete if inner t2

=-=
if (i > 0)
    i--;
|else
    i+=2;
=-=
if (i > 0)
    i--;
else
    |
=-=-=

Name: Delete if inner t3

=-=
if (i > 0)
    i--;
|else {
    i+=2;
}
=-=
if (i > 0)
    i--;
else {
    |
}
=-=-=

Name: Delete case inner t1

=-=
switch (1) {
    |case 1:
        std::cout << '1';
}
=-=
switch (1) {
    case 1:
        |
}
=-=-=

Name: Delete struct inner t1

=-=
stru|ct TStr{
    std::string str;
};
=-=
struct TStr{
    |
};
=-=-=

Name: Delete class inner t1

=-=
class Tcl{
    public:
        int i = 1;
        |void func();
    protected:
        void internal();
};
=-=
class Tcl{
    |
};
=-=-=

Name: Delete templated method inner t1

=-=
struct st_t{
    template|<class T>
    float calc(T t){
        return t;
    }
};
=-=
struct st_t{
    template<class T>
    float calc(T t){
        |
    }
};
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-outer)))

Name: Delete param outer t1

=-=
void func(int i, const |std::unordered_map<std::string, int>& map, std::string str){
}
=-=
void func(int i, |std::string str){
}
=-=-=

Name: Delete param outer t2

=-=
template <class T, class U>
struct faktory_t<T,
                 std::enable_if_t<std::is_same_v<typename |T::item_cnt_t<U, U>, types::t>>> {};
=-=
template <class T, class U>
struct faktory_t<T,
                 std::enable_if_t<std::is_same_v<|types::t>>> {};
=-=-=

Name: Delete param outer t3

=-=
template <class T, class U>
struct faktory_t<T,
                 std::enable_if_t<std::is_same_v<Tr<U>, |types::t>>> {};
=-=
template <class T, class U>
struct faktory_t<T,
                 std::enable_if_t<std::is_same_v<Tr<U>|>>> {};
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-lower)))

Name: Delete param lower t1

=-=
std::vector({1+1, 2|+2, 3+3})
=-=
std::vector({1+1, |})
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-LOWER)))

Name: Delete param LOWER t1

=-=
std::vector({1+1, 2|+2, 3+3})
=-=
std::vector({1+1|})
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-upper)))

Name: Delete param upper t1

=-=
std::vector({1+1, 2|+2, 3+3})
=-=
std::vector({|, 3+3})
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-UPPER)))

Name: Delete param UPPER t1

=-=
std::vector({1+1, 2|+2, 3+3})
=-=
std::vector({|3+3})
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-outer)))

Name: Delete statement outer t1

=-=
if (o|pts and (not i or i < 0 < 3) && t.call() or true ){}
=-=
if (|(not i or i < 0 < 3) && t.call() or true ){}
=-=-=

Name: Delete statement outer t2

=-=
if (opts and (not i or i < 0 < 3) && |t.call() or true ){}
=-=
if (opts and (not i or i < 0 < 3) && true ){}
=-=-=

Name: Delete statement outer t3

=-=
if (opts and (not i or i < 0 < 3) && t.call() or t|rue ){}
=-=
if (opts and (not i or i < 0 < 3) && t.call()| ){}
=-=-=

Name: Delete statement outer t4

=-=
if (opts and (not i or i < |0 < 3) && t.call() or true ){}
=-=
if (opts and (not i|) && t.call() or true ){}
=-=-=

Name: Delete statement outer t5

=-=
if |(opts and (not i or i < |0 < 3) && t.call() or true){}
=-=
if (|){}
=-=-=

Name: Delete statement outer t6

=-=
if (t|rue){}
=-=
if (|){}
=-=-=

Name: Delete statement outer t7

=-=
while (i < |3){}
=-=
while (|){}
=-=-=

Name: Delete statement outer t8

=-=
if (0< i < |3){}
=-=
if (|){}
=-=-=
