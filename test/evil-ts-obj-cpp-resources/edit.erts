Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-drag-up 1))

Name: drag up t1

=-=
struct s1_t {};

template<typename TTraits> //comment1
template<class T, typename U> //comment2
float
some_struct_t<TTraits>::
func1(T t, U u){
    return t + u;
}

float some_struct_t<TTraits>::|func2(T t, U u){
    return t + u;
}
=-=
struct s1_t {};

|float some_struct_t<TTraits>::func2(T t, U u){
    return t + u;
}

template<typename TTraits> //comment1
template<class T, typename U> //comment2
float
some_struct_t<TTraits>::
func1(T t, U u){
    return t + u;
}
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-clone-after-dwim))

Name: Clone after dwim t1

=-=
while (true)
    |i++;
=-=
while (true)
    |i++;
    i++;
=-=-=

Name: Clone after dwim t2

=-=
|while (true)
    i++;
=-=
|while (true)
    i++;
while (true)
    i++;
=-=-=

Name: Clone after dwim t3

=-=
template <class T>
|struct st_t{};
=-=
template <class T>
|struct st_t{};
template <class T>
struct st_t{};
=-=-=

Name: Clone after dwim t4

=-=
template <class T>
struct st_t{
    |using base_t     = cnt_t<S,
                             w_t<S>>;
};
=-=
template <class T>
struct st_t{
    |using base_t     = cnt_t<S,
                             w_t<S>>;
    using base_t     = cnt_t<S,
                             w_t<S>>;
};
=-=-=

Name: Clone after dwim t5

=-=
template <class S, |class B  = base_t<S>>
struct cnt_t : public B{};
=-=
template <class S, |class B  = base_t<S>, class B  = base_t<S>>
struct cnt_t : public B{};
=-=-=

Name: Clone after dwim t7

=-=
if (|opts and (not i || i < 0 < 3) && t.call() || true ){
}
=-=
if (|opts and opts and (not i || i < 0 < 3) && t.call() || true ){
}
=-=-=

Name: Clone after dwim t8

=-=
if (opts and |(not i or i < 0 < 3) && t.call() or true ){
}
=-=
if (opts and |(not i or i < 0 < 3) && (not i or i < 0 < 3) && t.call() or true ){
}
=-=-=

Name: Clone after dwim t9

=-=
if (opts and (not i or i < 0 < 3) && t.call() or |true ){
}
=-=
if (opts and (not i or i < 0 < 3) && t.call() or |true or true ){
}
=-=-=

Name: Clone after dwim t10

=-=
if (true){
    auto comp = true && false && |call();
}
=-=
if (true){
    auto comp = true && false && |call() && call();
}
=-=-=

Name: Clone after dwim t11

=-=
if (true){
    auto comp = |true && false && call();
}
=-=
if (true){
    auto comp = |true && true && false && call();
}
=-=-=

Name: Clone after dwim t12

=-=
if (true){
    |auto comp = true && false && call();
    call2();
}
=-=
if (true){
    |auto comp = true && false && call();
    auto comp = true && false && call();
    call2();
}
=-=-=

Name: Clone after dwim t13

=-=
if (true){
    auto comp = true && false;
    |res = sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=
if (true){
    auto comp = true && false;
    |res = sort(items_hld, comp);
    res = sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=-=
Name: Clone after dwim t14

=-=
if (true){
    auto comp = true && false;
    res = |sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=
if (true){
    auto comp = true && false;
    res = |sort(items_hld, comp) sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=-=

Name: Clone after dwim t15

=-=
if (true){
    auto comp = true && false;
    |call(comp);
}
=-=
if (true){
    auto comp = true && false;
    |call(comp) call(comp);
}
=-=-=

Name: Clone after dwim t16

=-=
if (true){
    auto comp = true && false;
   | call(comp);
}
=-=
if (true){
    auto comp = true && false;
   | call(comp);
    call(comp);
}
=-=-=

Name: Clone after dwim t17

=-=
if (true){
    auto comp = |call() + 1;
    return comp;
}
=-=
if (true){
    auto comp = |call() call() + 1;
    return comp;
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-clone-before-dwim))

Name: Clone before dwim t1

=-=
while (true)
    |i++;
=-=
while (true)
    i++;
    |i++;
=-=-=

Name: Clone before dwim t2

=-=
|while (true)
    i++;
=-=
while (true)
    i++;
|while (true)
    i++;
=-=-=

Name: Clone before dwim t3

=-=
template <class T>
|struct st_t{};
=-=
template <class T>
struct st_t{};
template <class T>
|struct st_t{};
=-=-=

Name: Clone before dwim t4

=-=
template <class T>
struct st_t{
    |using base_t     = cnt_t<S,
                             w_t<S>>;
};
=-=
template <class T>
struct st_t{
    using base_t     = cnt_t<S,
                             w_t<S>>;
    |using base_t     = cnt_t<S,
                             w_t<S>>;
};
=-=-=

Name: Clone before dwim t5

=-=
template <class S, |class B  = base_t<S>>
struct cnt_t : public B{};
=-=
template <class S, class B  = base_t<S>, |class B  = base_t<S>>
struct cnt_t : public B{};
=-=-=

Name: Clone before dwim t7

=-=
if (|opts and (not i || i < 0 < 3) && t.call() || true ){
}
=-=
if (opts and |opts and (not i || i < 0 < 3) && t.call() || true ){
}
=-=-=

Name: Clone before dwim t8

=-=
if (opts and |(not i or i < 0 < 3) && t.call() or true ){
}
=-=
if (opts and (not i or i < 0 < 3) && |(not i or i < 0 < 3) && t.call() or true ){
}
=-=-=

Name: Clone before dwim t9

=-=
if (opts and (not i or i < 0 < 3) && t.call() or |true ){
}
=-=
if (opts and (not i or i < 0 < 3) && t.call() or true or |true ){
}
=-=-=

Name: Clone before dwim t10

=-=
if (true){
    auto comp = true && false && |call();
}
=-=
if (true){
    auto comp = true && false && call() && |call();
}
=-=-=

Name: Clone before dwim t11

=-=
if (true){
    auto comp = |true && false && call();
}
=-=
if (true){
    auto comp = true && |true && false && call();
}
=-=-=

Name: Clone before dwim t12

=-=
if (true){
    |auto comp = true && false && call();
    call2();
}
=-=
if (true){
    auto comp = true && false && call();
    |auto comp = true && false && call();
    call2();
}
=-=-=

Name: Clone before dwim t13

=-=
if (true){
    auto comp = true && false;
    |res = sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=
if (true){
    auto comp = true && false;
    res = sort(items_hld, comp);
    |res = sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=-=
Name: Clone before dwim t14

=-=
if (true){
    auto comp = true && false;
    res = |sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=
if (true){
    auto comp = true && false;
    res = sort(items_hld, comp) |sort(items_hld, comp);
    items_hld.props.sorted.by_key = true;
}
=-=-=

Name: Clone before dwim t15

=-=
if (true){
    auto comp = true && false;
    |call(comp);
}
=-=
if (true){
    auto comp = true && false;
    call(comp)
    |call(comp);
}
=-=-=

Name: Clone before dwim t16

=-=
if (true){
    auto comp = true && false;
   | call(comp);
}
=-=
if (true){
    auto comp = true && false;
    call(comp);
    |call(comp);
}
=-=-=

Name: Clone before dwim t17

=-=
if (true){
    auto comp = |call() + 1;
    return comp;
}
=-=
if (true){
    auto comp = call() |call() + 1;
    return comp;
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-extract-up-dwim 1)
    (delete-trailing-whitespace))

Name: Extract dwim up t1

=-=
void f (){
    if (|i > 0)
        i--;
    else
        i+=2;
}
=-=
void f (){
    |i > 0
    if ()
        i--;
    else
        i+=2;
}
=-=-=

Name: Extract dwim up t2

=-=
void f (){
    if (i > 0)
        |i--;
    else
        i+=2;
}
=-=
void f (){
    |i--;
    if (i > 0)
        {}
    else
        i+=2;
}
=-=-=

Name: Extract dwim up t2-2

=-=
void f (){
    if (i > 0)
        {|i--;}
    else
        i+=2;
}
=-=
void f (){
    |i--;
    if (i > 0)
        {}
    else
        i+=2;
}
=-=-=

Name: Extract dwim up t2-3

=-=
void f (){
    if (i > 0){
        |i--;
    }
    else
        i+=2;
}
=-=
void f (){
    |i--;
    if (i > 0){

    }
    else
        i+=2;
}
=-=-=

Name: Extract dwim up t3

=-=
void f (){
    if (i > 0)
        i--;
    else
        |i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;
    |i+=2;
    else
        {}
}
=-=-=

Name: Extract dwim up t4

=-=
void f (){
    if (i > 0)
        i--;
    |else
        i+=2;
}
=-=
void f (){
    |else
        i+=2;
    if (i > 0)
        i--;

}
=-=-=

Name: Extract dwim up t5

=-=
void f (){
    if (i > 0)
        i--;
    else |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;
    |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
    else {}
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-extract-up-dwim 2)
    (delete-trailing-whitespace))

Name: Extract dwim up 2 levels t1

=-=
void f (){
    if (|i > 0)
        i--;
    else
        i+=2;
}
=-=
|i > 0
void f (){
    if ()
        i--;
    else
        i+=2;
}
=-=-=

Name: Extract dwim up 2 levels t2

=-=
void f (){
    if (i > 0)
        i--;
    else |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=
void f (){
    |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
    if (i > 0)
        i--;
    else {}
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-extract-down-dwim 1)
    (delete-trailing-whitespace))

Name: Extract dwim down t1

=-=
void f (){
    if (|i > 0)
        i--;
    else
        i+=2;
}
=-=
void f (){
    if ()
        i--;
    else
        i+=2;
    |i > 0
}
=-=-=

Name: Extract dwim down t2

=-=
void f (){
    if (i > 0)
        |i--;
    else
        i+=2;
}
=-=
void f (){
    if (i > 0)
        {}
    else
        i+=2;
    |i--;
}
=-=-=

Name: Extract dwim down t3

=-=
void f (){
    if (i > 0)
        i--;
    else
        |i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;
    else
        {}
    |i+=2;
}
=-=-=

Name: Extract dwim down t4

=-=
void f (){
    if (i > 0)
        i--;
    |else
        i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;

    |else
        i+=2;
}
=-=-=

Name: Extract dwim down t5

=-=
void f (){
    if (i > 0)
        i--;
    else |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;
    else {}
    |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-extract-down-dwim 2)
    (delete-trailing-whitespace))

Name: Extract dwim down two levels t1

=-=
void f (){
    if (|i > 0)
        i--;
    else
        i+=2;
}
=-=
void f (){
    if ()
        i--;
    else
        i+=2;
}
|i > 0
=-=-=

Name: Extract dwim down two levels t2

=-=
void f (){
    if (i > 0)
        i--;
    else
    |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=
void f (){
    if (i > 0)
        i--;
    else
    {}
    |if (i < 0){
        i++;
        std::cout<<"\n";
    } else
        i+=2;
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-inject-down-dwim 1)
    (delete-trailing-whitespace))

Name: Inject down dwim  t1

=-=
void f (){
    |i = 3;
    if (i > 0){
        i--;
    }
    if (true){}
}
=-=
void f (){

    if (i > 0){
        |i = 3;
        i--;
    }
    if (true){}
}
=-=-=

Name: Inject down dwim  t2

=-=
void f (){
    |i = 3;
    i++;

    if (i > 0){
        i--;
    }
}
=-=
void f (){

    i++;

    if (i > 0){
        |i = 3;
        i--;
    }
}
=-=-=

Name: Inject down dwim  t3

=-=
void f (){
    |i = 3;
    if (i > 0)
        i--;
}
=-=
void f (){

    if (i > 0)
    {
        |i = 3;
        i--;
    }
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-inject-down-dwim 2)
    (delete-trailing-whitespace))

Name: Inject down dwim two levels t1

=-=
void f (){
    |i = 3;
    if (i > 0)
        while (i)
        {}
}
=-=
void f (){

    if (i > 0)
        while (i)
        {|i = 3;
         }
}
=-=-=

Name: Inject down dwim two levels t2

=-=
void f (){
    |i = 3;
    if (i > 0){
        i=call(i);
        while (i){
            auto j=3;
            auto jj=3;
        }
    }
}
=-=
void f (){

    if (i > 0){
        i=call(i);
        while (i){
            |i = 3;
            auto j=3;
            auto jj=3;
        }
    }
}
=-=-=


Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-inject-up-dwim 1)
    (delete-trailing-whitespace))

Name: Inject up dwim  t1

=-=
void f (){
    i++;
    if (i > 0){
        i--;
    }
    |i = 3;
}
=-=
void f (){
    i++;
    if (i > 0){
        i--;
        |i = 3;
    }

}
=-=-=

Name: Inject up dwim  t2

=-=
void f (){
    if (i > 3){
        i--;
    }
    i++;
    if (i > 0){
        i--;
    }
    i++;
    |i = 3;
}
=-=
void f (){
    if (i > 3){
        i--;
    }
    i++;
    if (i > 0){
        i--;
        |i = 3;
    }
    i++;

}
=-=-=

Name: Inject up dwim  t3

=-=
void f (){
    i++;
    if (i > 0)
        i--;
    i++;
    |i = 3;
}
=-=
void f (){
    i++;
    if (i > 0)
    {
        i--;
        |i = 3;
    }
    i++;

}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-inject-up-dwim 2)
    (delete-trailing-whitespace))

Name: Inject up dwim two levels t1

=-=
void f (){
    if (i > 0){
        i--;
        if (i > 3){
            i--;
            i--;
        }
    }
    i++;
    |i = 3;
}
=-=
void f (){
    if (i > 0){
        i--;
        if (i > 3){
            i--;
            i--;
            |i = 3;
        }
    }
    i++;

}
=-=-=

Name: Inject up dwim two levels t2

=-=
void f (){
    i++;
    if (i > 0){
        if (i > 3)
            i--;
    }
    if (i)
        if (i > 3)
           i++;
    |i = 3;
}
=-=
void f (){
    i++;
    if (i > 0){
        if (i > 3)
            i--;
    }
    if (i)
        if (i > 3)
        {
           i++;
           |i = 3;
        }

}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-cpp-tests-setup)
    (evil-ts-obj-slurp 1)
    (delete-trailing-whitespace))

Name: Slurp t1

=-=
void f (){
    i++;
    if (i > 0){
       | i--;
    }
    i = 3;
}
=-=
void f (){
    i++;
    if (i > 0){
       | i--;
        i = 3;
    }

}
=-=-=

Name: Slurp t2

=-=
void f (){
    i++;
    if (i > 0)
        |i--;
    i = 3;
}
=-=
void f (){
    i++;
    if (i > 0)
    {
        |i--;
        i = 3;
    }

}
=-=-=

Name: Slurp t3

=-=
void f (){
    i++;
    |if (i > 0){
        i--;
    }
    i = 3;
}
=-=
void f (){

    |if (i > 0){
        i++;
        i--;
    }
    i = 3;
}
=-=-=

Name: Slurp t4

=-=
void f (){
    i++;
    |if (i > 0)
        i--;
    i = 3;
}
=-=
void f (){

    |if (i > 0)
    {
        i++;
        i--;
    }
    i = 3;
}
=-=-=
