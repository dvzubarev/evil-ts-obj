Point-Char: |

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-outer)))

Name: Delete for loop outer t1

=-=
fn func () {
    for i in 1..10 {
        |println!("{i}");
    }
}
=-=
fn func () {
    |
}
=-=-=

Name: Delete if outer t1

=-=
if |i > 0 {
    i -= 1;
} else if i < 0 {
    i += 1;
    println!();
} else {
    i n+= 2;
}
=-=
|
=-=-=

Name: Delete if outer t2

=-=
if i > 0 {
    i -= 1;
} else if i < 0 {
    i += 1;
    println!();
} else {
    |i += 2;
}
=-=
if i > 0 {
    i -= 1;
} else if i < 0 {
    i += 1;
    println!();
} |
=-=-=


Name: Delete if outer t3

=-=
if i > 0 {
    i -= 1;
} el|se if i < 0 {
    i += 1;
    println!();
} else {
    i += 2;
}
=-=
if i > 0 {
    i -= 1;
} |
=-=-=

Name: Delete if outer t4

=-=
if i > 0 {
    i -= 1;
} else if i |< 0 {
    i += 1;
    println!();
} else {
    i += 2;
}
=-=
if i > 0 {
    i -= 1;
} else |
=-=-=

Name: Delete struct outer t1

=-=
struct St {
    |s: String;
}
=-=
|
=-=-=

Name: Delete generic function t1

=-=
fn calc<T,U> (t: T, u: U) -> usize
where
    T: Default,
    U: Display,
{
    |t + u
}
=-=
|
=-=-=

Name: Delete generic method t1

=-=
impl<T,U> St<T,U> {
    fn calc(self, t: T, u: U) -> f32 {
        |t + u
    }
}
=-=
impl<T,U> St<T,U> {
    |
}
=-=-=

Name: Delete impl block outer t1

=-=
impl<T,U> St<T,U> |{
    fn calc(self, t: T, u: U) -> f32 {
        t + u
    }
}
=-=
|
=-=-=

Name: Delete empty compound outer t1

=-=
fn func() {
    loop {
    |
    }
}
=-=
fn func() {
    |
}
=-=-=

Name: Delete next compound outer t1

=-=
fn func() {
|
while true {

    }
}
=-=
fn func() {

|
}
=-=-=

Name: Delete function with attribute t1

=-=
#[attr]
fn func() {
    |
}
=-=

=-=-=

Name: Delete function with attribute t2

=-=
#[attr1]
#[attr2]
fn func() {
    |
}
=-=

=-=-=

Name: Delete struct with attribute t1

=-=
#[attr1]
struct S {
    |
}
=-=

=-=-=

Name: Delete struct with attribute t2

=-=
#[attr1]
#[attr2]
struct S {
    |
}
=-=

=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-compound-inner)))

Name: Delete for loop inner t1

=-=
fn func () {
    for i in 1..10 {
        |println!("{i}");
    }
}
=-=
fn func () {
    for i in 1..10 {
        |
    }
}
=-=-=

Name: Delete for loop inner t2

=-=
for |i in 1..10 {
    i += 1;
}
=-=
for i in 1..10 {
    |
}
=-=-=

Name: Delete if inner t1

=-=
|if i > 0 {
    i -= 1;
} else {
    i += 2;
}
=-=
if i > 0 {
    |
} else {
    i += 2;
}
=-=-=

Name: Delete if inner t2

=-=
if i > 0 {
    i -= 1;
}| else {
    i += 2;
}
=-=
if i > 0 {
    i -= 1;
} else {
    |
}
=-=-=

Name: Delete if inner t3

=-=
if (i > 0) {
    i--;
} |else {
    i+=2;
}
=-=
if (i > 0) {
    i--;
} else {
    |
}
=-=-=

Name: Delete match inner t1

=-=
match i {
    |1 => println!("1"),
}
=-=
match i {
    1 => |,
}
=-=-=

Name: Delete struct inner t1

=-=
stru|ct St {
    s: String;
}
=-=
struct St {
    |
}
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-outer)))

Name: Delete param outer t1

=-=
fn func(i: i32, map: &|HashMap<String, i32>, s: String){
}
=-=
fn func(i: i32, |s: String){
}
=-=-=

Name: Delete param outer t2

=-=
struct St<T : Display + Debug, U: |Iterator<Item=usize>> { }
=-=
struct St<T : Display + Debug> { }
=-=-=

Name: Delete param outer t3

=-=
struct St<T : Display + Debug, U: Iterator<Item=|usize>> { }
=-=
struct St<T : Display + Debug, U: Iterator<|>> { }
=-=-=

Name: Delete param outer t4

=-=
fn calc<T,U> (t: T, u: U) -> usize
where
    |T: Default,
    U: Display,
{
    t + u
}
=-=
fn calc<T,U> (t: T, u: U) -> usize
where
    |U: Display,
{
    t + u
}
=-=-=

Name: Delete param outer t5

=-=
#![attr(|foo, bar)]
=-=
#![attr(bar)]
=-=-=

Name: Delete param outer t6

=-=
vec![1, 2|, 3]
=-=
vec![1, 3]
=-=-=

Name: Delete param outer t7

=-=
println!("{}, {}", |"Hello", "World")
=-=
println!("{}, {}", "World")
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-lower)))

Name: Delete param lower t1

=-=
let a = [1+1, 2|+2, 3+3];
=-=
let a = [1+1, |];
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-LOWER)))

Name: Delete param LOWER t1

=-=
let a = [1+1, 2|+2, 3+3];
=-=
let a = [1+1|];
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-upper)))

Name: Delete param upper t1

=-=
let a = [1+1, 2|+2, 3+3];
=-=
let a = [|, 3+3];
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-param-UPPER)))

Name: Delete param UPPER t1

=-=
let a = [1+1, 2|+2, 3+3];
=-=
let a = [|3+3];
=-=-=

Code:
  (lambda ()
    (evil-ts-obj-rust-tests-setup)
    (apply #'evil-delete (evil-ts-obj-statement-outer)))

Name: Delete statement outer t1
Point-Char: _

=-=
if o_pts && (!i || i < 0 < 3) && t.call() || true {}
=-=
if _(!i || i < 0 < 3) && t.call() || true {}
=-=-=

Name: Delete statement outer t2

=-=
if opts && (!i || i < 0 < 3) && _t.call() || true {}
=-=
if opts && (!i || i < 0 < 3) && _true {}
=-=-=

Name: Delete statement outer t3

=-=
if opts && (!i || i < 0 < 3) && t.call() || t_rue {}
=-=
if opts && (!i || i < 0 < 3) && t.call()_ {}
=-=-=

Name: Delete statement outer t4

=-=
if opts && (!i || i < _0 < 3) && t.call() || true {}
=-=
if opts && (!i_) && t.call() || true {}
=-=-=

Name: Delete statement outer t5

=-=
if_ opts && (!i || i < 0 < 3) && t.call() || true {}
=-=
if _ {}
=-=-=

Name: Delete statement outer t6
Point-Char: |

=-=
if t|rue {}
=-=
if | {}
=-=-=

Name: Delete statement outer t7

=-=
while i < |3 {}
=-=
while | {}
=-=-=

Name: Delete statement outer t8

=-=
let i = |5 * 2;
=-=
let i = |;
=-=-=

Name: Delete statement outer t9

=-=
i = |5 * 2;
=-=
i = |;
=-=-=

Name: Delete statement outer t10

=-=
struct S {
    f1: i32,
|    f2: i32,
    f3: i32,
}
=-=
struct S {
    f1: i32,
    |f3: i32,
}
=-=-=
